plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {

    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")
    // Mandatory Dependencies
    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}")
    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}")
    // Optional Dependencies
    modCompileOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}")
    modRuntimeOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}")

    modRuntimeOnly("maven.modrinth:journeymap:${rootProject.journeymap_version}-fabric")// Test with JourneyMap in dev
    modCompileOnly("info.journeymap:journeymap-api:${rootProject.journeymap_api_version}-fabric-SNAPSHOT")// API is a JiJ on fabric, add manually
    modRuntimeOnly("info.journeymap:journeymap-api:${rootProject.journeymap_api_version}-fabric-SNAPSHOT") // API is a JiJ on fabric, add manually

    modApi("maven.modrinth:pinlib:$rootProject.pinlib_api_version")
    modRuntimeOnly("maven.modrinth:pinlib:$rootProject.pinlib_api_version")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
